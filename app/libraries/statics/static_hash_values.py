K_constants_256 = [
    '01000010100010100010111110011000',
    '01110001001101110100010010010001',
    '10110101110000001111101111001111',
    '11101001101101011101101110100101',
    '00111001010101101100001001011011',
    '01011001111100010001000111110001',
    '10010010001111111000001010100100',
    '10101011000111000101111011010101',
    '11011000000001111010101010011000',
    '00010010100000110101101100000001',
    '00100100001100011000010110111110',
    '01010101000011000111110111000011',
    '01110010101111100101110101110100',
    '10000000110111101011000111111110',
    '10011011110111000000011010100111',
    '11000001100110111111000101110100',
    '11100100100110110110100111000001',
    '11101111101111100100011110000110',
    '00001111110000011001110111000110',
    '00100100000011001010000111001100',
    '00101101111010010010110001101111',
    '01001010011101001000010010101010',
    '01011100101100001010100111011100',
    '01110110111110011000100011011010',
    '10011000001111100101000101010010',
    '10101000001100011100011001101101',
    '10110000000000110010011111001000',
    '10111111010110010111111111000111',
    '11000110111000000000101111110011',
    '11010101101001111001000101000111',
    '00000110110010100110001101010001',
    '00010100001010010010100101100111',
    '00100111101101110000101010000101',
    '00101110000110110010000100111000',
    '01001101001011000110110111111100',
    '01010011001110000000110100010011',
    '01100101000010100111001101010100',
    '01110110011010100000101010111011',
    '10000001110000101100100100101110',
    '10010010011100100010110010000101',
    '10100010101111111110100010100001',
    '10101000000110100110011001001011',
    '11000010010010111000101101110000',
    '11000111011011000101000110100011',
    '11010001100100101110100000011001',
    '11010110100110010000011000100100',
    '11110100000011100011010110000101',
    '00010000011010101010000001110000',
    '00011001101001001100000100010110',
    '00011110001101110110110000001000',
    '00100111010010000111011101001100',
    '00110100101100001011110010110101',
    '00111001000111000000110010110011',
    '01001110110110001010101001001010',
    '01011011100111001100101001001111',
    '01101000001011100110111111110011',
    '01110100100011111000001011101110',
    '01111000101001010110001101101111',
    '10000100110010000111100000010100',
    '10001100110001110000001000001000',
    '10010000101111101111111111111010',
    '10100100010100000110110011101011',
    '10111110111110011010001111110111',
    '11000110011100010111100011110010']


def create_k_constants():
    def look_up_primes(max_val):
        """
        max_val: integer
        This function (as the name suggests) looks up prime numbers until {max_val} is reached.
        It starts by looping through the numbers from 2 to {max_val} - Every loop starts another for loop that
        loops through the numbers from 2 to the current number.
        If the current number divided by the current number in the second loop has no leftovers, the current
        number is not a prime number.
        """

        prime_list = []
        for i in range(2, max_val):
            prime = True
            for y in range(2, i):
                if (i % y) == 0:
                    prime = False
            if prime:
                prime_list.append(i)
        return prime_list

    primes = look_up_primes(312)
    for num in primes:
        cube_root_num = num ** (1/3)
        rounded_down = int(cube_root_num)
        fraction_num = str(cube_root_num - rounded_down)
        binary_str = ''

        """
        We start by calculating the first part:
            - fraction_num * 2
        if that is higher or equal to 1 we add a 1 to binary_str
        After that we remove the first digit after the point (0.625 -> 0.25)
            - We can do that by removing the first 3 parts of the representation and add back the 0. at the end
        Now we have to start again with the new value.
        """

        for index in range(len(fraction_num) - 2):
            temp_fraction = float(fraction_num) * 2
            if temp_fraction >= 1:
                binary_str += '1'
            else:
                binary_str += '0'
            print(f'{fraction_num} - {binary_str}')
            fraction_num = fraction_num[3:]
            fraction_num = '0.' + fraction_num

        print(binary_str)
        binary_str = ''

    k = []


create_k_constants()
